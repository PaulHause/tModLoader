--- src/TerrariaNetCore/Terraria/Localization/LanguageManager.cs
+++ src/tModLoader/Terraria/Localization/LanguageManager.cs
@@ -12,14 +_,15 @@
 using ReLogic.Graphics;
 using Terraria.GameContent;
 using Terraria.Initializers;
+using Terraria.ModLoader;
 using Terraria.Utilities;
 
 namespace Terraria.Localization;
 
-public class LanguageManager
+public partial class LanguageManager
 {
 	public static LanguageManager Instance = new LanguageManager();
-	private readonly Dictionary<string, LocalizedText> _localizedTexts = new Dictionary<string, LocalizedText>();
+	internal readonly Dictionary<string, LocalizedText> _localizedTexts = new Dictionary<string, LocalizedText>();
 	private readonly Dictionary<string, List<string>> _categoryGroupedKeys = new Dictionary<string, List<string>>();
 	private GameCulture _fallbackCulture = GameCulture.DefaultCulture;
 
@@ -101,6 +_,7 @@
 			}
 
 			LoadLanguage(culture);
+
 			ActiveCulture = culture;
 			Thread.CurrentThread.CurrentCulture = culture.CultureInfo;
 			Thread.CurrentThread.CurrentUICulture = culture.CultureInfo;
@@ -114,6 +_,7 @@
 	private void LoadLanguage(GameCulture culture, bool processCopyCommands = true)
 	{
 		LoadFilesForCulture(culture);
+		LocalizationLoader.RefreshModLanguage(culture, false);
 		if (this.OnLanguageChanging != null)
 			this.OnLanguageChanging(this);
 
@@ -144,19 +_,50 @@
 		}
 	}
 
-	private void ProcessCopyCommandsInTexts()
+	internal void ProcessCopyCommandsInTexts()
 	{
+		/*
 		Regex regex = new Regex("{\\$(\\w+\\.\\w+)}", RegexOptions.Compiled);
+		*/
+		Regex regex = new Regex(@"{\$([\w\.]+)}", RegexOptions.Compiled);
+
 		foreach (KeyValuePair<string, LocalizedText> localizedText in _localizedTexts) {
 			LocalizedText value = localizedText.Value;
+
+			if (value.Value == null)
+				continue;
+
 			for (int i = 0; i < 100; i++) {
+				string text = regex.Replace(value.Value, (Match match) => GetTextValue(FindKeyInScope(match.Groups[1].ToString(), localizedText.Key)));
+				/* 
 				string text = regex.Replace(value.Value, (Match match) => GetTextValue(match.Groups[1].ToString()));
+				*/
 				if (text == value.Value)
 					break;
 
 				value.SetValue(text);
 			}
 		}
+
+		RecalculateBoundTextValues();
+
+		// Provides additional functionality allowing substitutions to assume the scope of the key they belong to.
+		// For example, if a key is Mods.ExampleMod.Common.Test with a match, {$Common.PaperAirplane}, Mods.ExampleMod.Common.PaperAirplane if it exists would be matched. All other key variations from each parent key are checked. 
+		string FindKeyInScope(string key, string scope)
+		{
+			if (Exists(key))
+				return key;
+
+			string[] splitKey = scope.Split(".");
+			for (int j = splitKey.Length - 1; j >= 0; j--) {
+				string partialKey = string.Join(".", splitKey.Take(j + 1));
+				string combinedKey = partialKey + "." + key;
+				if (Exists(combinedKey))
+					return combinedKey;
+			}
+
+			return key;
+		}
 	}
 
 	public void UseSources(List<IContentSource> sourcesFromLowestToHighest)
@@ -310,7 +_,9 @@
 		if (!_categoryGroupedKeys.ContainsKey(categoryName))
 			return new LocalizedText(categoryName + ".RANDOM", categoryName + ".RANDOM");
 
-		List<string> list = _categoryGroupedKeys[categoryName];
+		//TML: Changed to a GetKeysInCategory call instead of direct dictionary access.
+		var list = GetKeysInCategory(categoryName);
+
 		return GetText(categoryName + "." + list[(random ?? Main.rand).Next(list.Count)]);
 	}
 
@@ -319,7 +_,9 @@
 		if (!_categoryGroupedKeys.ContainsKey(categoryName))
 			return new LocalizedText(categoryName + ".INDEXED", categoryName + ".INDEXED");
 
-		List<string> list = _categoryGroupedKeys[categoryName];
+		//TML: Changed to a GetKeysInCategory call instead of direct dictionary access.
+		var list = GetKeysInCategory(categoryName);
+
 		int index2 = index % list.Count;
 		return GetText(categoryName + "." + list[index2]);
 	}
@@ -328,10 +_,15 @@
 
 	public LocalizedText GetText(string key)
 	{
-		if (!_localizedTexts.ContainsKey(key))
-			return new LocalizedText(key, key);
-
-		return _localizedTexts[key];
+		return _localizedTexts.TryGetValue(key, out var text) ? text : new LocalizedText(key, key);
+	}
+
+	public LocalizedText GetOrRegister(string key, Func<string> makeDefaultValue = null)
+	{
+		if (!_localizedTexts.TryGetValue(key, out var text))
+			_localizedTexts[key] = text = new LocalizedText(key, makeDefaultValue?.Invoke() ?? key);
+
+		return text;
 	}
 
 	public string GetTextValue(string key)
